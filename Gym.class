import java.util.Arrays;
import java.util.Scanner;

public class Gym {
    public Gym() {
    }

    public static void main(String[] args) {
        while(true) {
            int[] nWeights = inputWeights();
            System.out.println(countMaxWeight(nWeights));
        }
    }

    private static int[] inputWeights() {
        Scanner scanner = new Scanner(System.in);
        String line = scanner.nextLine();
        String[] sWeights = line.split(",| ");
        int[] nWeights = new int[sWeights.length];

        try {
            for(int i = 0; i < sWeights.length; ++i) {
                int n = Integer.parseInt(sWeights[i]);
                if (n > 20) {
                    System.out.println("Вес блина - " + n + " фунтов. Больше ограничения в 20 фунтов");
                    break;
                }

                nWeights[i] = Integer.parseInt(sWeights[i].replaceAll("\\D", ""));
                if (i > 1000) {
                    System.out.println("В наборе может присутствовать от 1 до 1000 блинов. Повторите ввод.");
                    break;
                }
            }
        } catch (NumberFormatException var6) {
            System.out.println("Неверный формат ввода");
        }

        Arrays.sort(nWeights);
        return nWeights;
    }

    private static int countMaxWeight(int[] weights0) {
        boolean equal = false;
        int offset = 0;
        int leftWeight = 0;
        int rightWeight = 0;

        while(!equal) {
            int[] weights = weights0;
            leftWeight = 0;
            int rightWeight = false;
            int sum = 0;
            int[] var7 = weights0;
            int sumR = weights0.length;

            int line;
            int i;
            for(line = 0; line < sumR; ++line) {
                i = var7[line];
                sum += i;
            }

            int maxWeight = sum;
            if (sum % 2 != 0) {
                maxWeight = sum - 1;
            }

            for(sumR = weights0.length - (offset + 1); sumR >= 0; --sumR) {
                leftWeight += weights[sumR];
                if (leftWeight > maxWeight / 2) {
                    leftWeight -= weights[sumR];
                } else {
                    weights[sumR] = 0;
                }
            }

            sumR = 0;
            int[] var15 = weights;
            i = weights.length;

            for(int var11 = 0; var11 < i; ++var11) {
                int i = var15[var11];
                sumR += i;
            }

            rightWeight = sumR;
            line = 0;

            while(!equal) {
                if (leftWeight == rightWeight) {
                    equal = true;
                } else {
                    rightWeight -= weights[line];
                    if (line < weights.length - 1) {
                        ++line;
                    }
                }

                if (line == weights.length - 1) {
                    ++offset;
                    break;
                }
            }

            if (offset > weights.length) {
                break;
            }
        }

        return leftWeight == rightWeight ? leftWeight + rightWeight : 0;
    }
}
